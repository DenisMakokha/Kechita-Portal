generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== CORE MODELS ====================

model Organization {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  logo      String?
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  headId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  staff User[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String
  
  // Employment Details
  employeeId        String?   @unique
  position          String?
  branch            String?
  region            String?
  departmentId      String?
  department        Department? @relation(fields: [departmentId], references: [id])
  supervisorId      String?
  supervisor        User?     @relation("Supervision", fields: [supervisorId], references: [id])
  subordinates      User[]    @relation("Supervision")
  
  // Personal Details
  dateOfBirth       DateTime?
  nationalId        String?
  taxPin            String?
  nhifNumber        String?
  nssfNumber        String?
  bankAccount       String?
  bankBranch        String?
  emergencyContact  String?
  emergencyPhone    String?
  
  // Employment Status
  startDate         DateTime?
  probationEndDate  DateTime?
  permanentDate     DateTime?
  terminationDate   DateTime?
  status            String    @default("ACTIVE")
  
  // Account Security
  accountLocked     Boolean   @default(false)
  lockReason        String?
  lockedAt          DateTime?
  lockedBy          String?
  passwordResetToken String?
  passwordResetExpiry DateTime?
  passwordChangedAt DateTime?
  mustChangePassword Boolean  @default(false)
  passwordHistory   Json?
  lastLoginAt       DateTime?
  lastLoginIp       String?
  failedLoginAttempts Int     @default(0)
  lastFailedLoginAt DateTime?
  activeSessions    Json?
  mfaEnabled        Boolean   @default(false)
  mfaSecret         String?
  
  orgId             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  createdJobs          JobPosting[]       @relation("JobCreator")
  leaveApplications    LeaveApplication[] @relation("LeaveApplicant")
  approvedLeaves       LeaveApplication[] @relation("LeaveApprover")
  claims               Claim[]            @relation("ClaimRequester")
  approvedClaims       Claim[]            @relation("ClaimApprover")
  staffLoans           StaffLoan[]        @relation("LoanRequester")
  approvedLoans        StaffLoan[]        @relation("LoanApprover")
  kpiReports           BranchDailyKPI[]
  documents            StaffDocument[]
  policyAcknowledgments PolicyAcknowledgment[]
  announcementsCreated Announcement[]     @relation("AnnouncementCreator")
  announcementReads    AnnouncementRead[]
  pettyCashRequests    PettyCashTransaction[] @relation("PettyCashRequester")
  pettyCashApprovals   PettyCashTransaction[] @relation("PettyCashApprover")
  cashCounts           CashCount[]
  roles                UserRole[]
}

// ==================== RECRUITMENT MODULE ====================

model JobPosting {
  id            String   @id @default(uuid())
  title         String
  description   String   @db.Text
  requirements  String?  @db.Text // ATS: Job requirements
  responsibilities String? @db.Text // ATS: Job responsibilities
  salary        String?  // ATS: Salary range
  branch        String
  region        String
  deadline      DateTime
  employmentType String
  status        String   @default("ACTIVE")
  pipelineId    String?  // ATS: Custom pipeline for this job
  pipeline      Pipeline? @relation(fields: [pipelineId], references: [id])
  createdById   String
  createdBy     User     @relation("JobCreator", fields: [createdById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  applications  Application[]
  rules         RecruitmentRuleSet?
  regretTemplates RegretTemplate[]
  
  @@index([pipelineId])
}

model Application {
  id            String   @id @default(uuid())
  jobId         String
  job           JobPosting @relation(fields: [jobId], references: [id])
  applicantType String
  firstName     String
  lastName      String
  email         String
  phone         String
  resumeUrl     String?
  resumeText    String?  @db.Text
  status        String   @default("RECEIVED")
  stageId       String?  // ATS: Current pipeline stage
  stage         Stage?   @relation(fields: [stageId], references: [id])
  score         Int?
  scoringNotes  Json?
  source        String?  // ATS: Application source (LinkedIn, Indeed, Referral, etc.)
  tags          String[] // ATS: Quick tags array
  backgroundCheckStatus String? @default("PENDING")
  backgroundCheckNotes  String?  @db.Text
  backgroundCheckDate   DateTime?
  referenceCheckStatus  String? @default("PENDING")
  referenceCheckNotes   String?  @db.Text
  references            Json?
  lastActivityAt DateTime @default(now()) // ATS: Last activity timestamp
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  interviews    Interview[]
  offers        Offer[]
  onboardingItems OnboardingItem[]
  backgroundChecks BackgroundCheck[]
  notes         CandidateNote[] // ATS: Team notes
  candidateTags CandidateTag[]  // ATS: Detailed tags
  activities    CandidateActivity[] // ATS: Activity timeline
  talentPools   TalentPoolEntry[] // ATS: Talent pool membership
  
  @@index([stageId])
  @@index([email])
  @@index([lastActivityAt])
}

model BackgroundCheck {
  id            String   @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  checkType     String
  provider      String?
  status        String   @default("PENDING")
  result        String?
  notes         String?  @db.Text
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Interview {
  id          String   @id @default(uuid())
  applicationId String
  application Application @relation(fields: [applicationId], references: [id])
  panel       String
  mode        String
  location    String?
  startsAt    DateTime
  endsAt      DateTime
  notes       String?  @db.Text
  feedback    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Offer {
  id            String   @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  title         String
  salary        Int
  currency      String   @default("KES")
  contractText  String?  @db.Text
  contractUrl   String?
  signatureDataUrl String? @db.Text
  status        String   @default("DRAFT")
  negotiationNotes Json?
  issuedAt      DateTime?
  respondedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ContractTemplate {
  id        String   @id @default(uuid())
  name      String
  body      String   @db.Text
  category  String
  createdBy String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OnboardingTask {
  id        String   @id @default(uuid())
  code      String   @unique
  label     String
  category  String
  required  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  items OnboardingItem[]
}

model OnboardingItem {
  id            String   @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  taskId        String
  task          OnboardingTask @relation(fields: [taskId], references: [id])
  completed     Boolean  @default(false)
  evidenceUrl   String?
  completedBy   String?
  completedAt   DateTime?
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RecruitmentRuleSet {
  id                 String   @id @default(uuid())
  jobId              String   @unique
  job                JobPosting @relation(fields: [jobId], references: [id])
  mustHave           Json
  preferred          Json
  shortlistThreshold Int      @default(35)
  rejectThreshold    Int      @default(15)
  autoRegret         Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model RegretTemplate {
  id        String   @id @default(uuid())
  name      String
  subject   String
  bodyHtml  String   @db.Text
  bodyText  String   @db.Text
  locale    String   @default("en")
  jobId     String?
  job       JobPosting? @relation(fields: [jobId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==================== ATS: PIPELINE SYSTEM ====================

model Pipeline {
  id        String   @id @default(uuid())
  name      String
  description String? @db.Text
  isDefault Boolean  @default(false)
  isTemplate Boolean @default(false)
  organizationId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  stages    Stage[]
  jobs      JobPosting[]
  
  @@index([isDefault, isTemplate])
}

model Stage {
  id          String   @id @default(uuid())
  pipelineId  String
  pipeline    Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  name        String
  description String?  @db.Text
  order       Int
  color       String   @default("#3B82F6")
  icon        String?
  type        String   @default("CUSTOM") // APPLIED, SCREENING, INTERVIEW, OFFER, HIRED, REJECTED, CUSTOM
  requirements Json?   // Requirements to advance: {"interviewFeedback": true, "documentsUploaded": true}
  autoAdvance Boolean  @default(false)
  advanceConditions Json? // Conditions for auto-advance
  slaHours    Int?     // SLA in hours
  notifyOnEntry Boolean @default(false)
  notifyOnStale Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  applications Application[]
  activities   CandidateActivity[]
  
  @@unique([pipelineId, order])
  @@index([pipelineId, order])
}

// ==================== ATS: COLLABORATION ====================

model CandidateNote {
  id            String   @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  authorId      String
  content       String   @db.Text
  mentions      String[] // User IDs mentioned with @
  isInternal    Boolean  @default(true) // Internal vs shared with candidate
  attachments   Json?    // Array of attachment URLs
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([applicationId, createdAt])
  @@index([authorId])
}

model CandidateTag {
  id            String   @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  name          String   // "shortlist", "follow-up", "strong-culture-fit"
  color         String   @default("#10B981")
  category      String?  // "status", "skill", "culture", "custom"
  addedById     String
  addedAt       DateTime @default(now())
  
  @@unique([applicationId, name])
  @@index([applicationId])
  @@index([name])
}

model CandidateActivity {
  id            String   @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  activityType  String   // "stage_change", "note_added", "email_sent", "interview_scheduled", "document_uploaded", "score_updated"
  userId        String?  // Who performed the action
  title         String   // Display title
  description   String?  @db.Text
  metadata      Json?    // Additional data (old stage, new stage, etc.)
  stageId       String?  // For stage_change activities
  stage         Stage?   @relation(fields: [stageId], references: [id])
  createdAt     DateTime @default(now())
  
  @@index([applicationId, createdAt])
  @@index([activityType])
}

// ==================== ATS: TALENT POOL ====================

model TalentPoolEntry {
  id            String   @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  poolName      String   @default("general") // "engineering", "sales", "general"
  tags          String[]
  notes         String?  @db.Text
  rating        Int?     // 1-5 rating
  availableFrom DateTime?
  addedById     String
  addedAt       DateTime @default(now())
  lastContactedAt DateTime?
  
  @@unique([applicationId, poolName])
  @@index([poolName, rating])
  @@index([addedAt])
}

// ==================== LEAVE MANAGEMENT MODULE ====================

model LeaveType {
  id               String   @id @default(uuid())
  code             String   @unique
  name             String
  daysAllowed      Int
  requiresDocument Boolean  @default(false)
  carryForward     Boolean  @default(true)
  maxCarryForward  Int?
  isPaid           Boolean  @default(true)
  isEmergency      Boolean  @default(false)
  active           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  applications LeaveApplication[]
  balances     LeaveBalance[]
}

model LeaveApplication {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation("LeaveApplicant", fields: [userId], references: [id])
  leaveTypeId     String
  leaveType       LeaveType @relation(fields: [leaveTypeId], references: [id])
  startDate       DateTime
  endDate         DateTime
  daysRequested   Int
  reason          String   @db.Text
  coveringStaff   String?
  documentUrl     String?
  isEmergency     Boolean  @default(false)
  emergencyReason String?  @db.Text
  status          String   @default("PENDING")
  approvalChain   Json
  approvalHistory Json
  currentApproverPosition String?
  approvedById    String?
  approvedBy      User?    @relation("LeaveApprover", fields: [approvedById], references: [id])
  approvalNotes   String?  @db.Text
  approvedAt      DateTime?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LeaveBalance {
  id          String   @id @default(uuid())
  userId      String
  year        Int
  leaveTypeId String
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  allocated   Int
  used        Int
  balance     Int
  carriedOver Int      @default(0)
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, year, leaveTypeId])
}

model LeaveConflict {
  id              String   @id @default(uuid())
  applicationId1  String
  applicationId2  String
  branch          String
  conflictDate    DateTime
  severity        String
  resolved        Boolean  @default(false)
  resolutionNotes String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ==================== CLAIMS MANAGEMENT MODULE ====================

model ClaimType {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  category    String
  requiresReceipt Boolean @default(true)
  maxAmount   Decimal?  @db.Decimal(12, 2)
  pettyCashCategory String?
  requiresPreApproval Boolean @default(false)
  approvalChain Json
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  claims Claim[]
}

model Claim {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation("ClaimRequester", fields: [userId], references: [id])
  claimTypeId     String
  claimType       ClaimType @relation(fields: [claimTypeId], references: [id])
  amount          Decimal  @db.Decimal(12, 2)
  currency        String   @default("KES")
  description     String   @db.Text
  claimDate       DateTime
  receipts        Json
  status          String   @default("PENDING")
  approvalChain   Json
  approvalHistory Json
  currentApproverId String?
  approvedById    String?
  approvedBy      User?    @relation("ClaimApprover", fields: [approvedById], references: [id])
  approvalNotes   String?  @db.Text
  approvedAt      DateTime?
  paidAt          DateTime?
  paidAmount      Decimal?  @db.Decimal(12, 2)
  paidBy          String?
  paymentRef      String?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ==================== STAFF LOANS MODULE ====================

model StaffLoan {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation("LoanRequester", fields: [userId], references: [id])
  type            String
  amount          Decimal  @db.Decimal(12, 2)
  currency        String   @default("KES")
  reason          String   @db.Text
  requestedDate   DateTime @default(now())
  requestMonth    String
  requestDay      Int
  processingMonth String?
  processingNote  String?  @db.Text
  approvedAmount  Decimal?  @db.Decimal(12, 2)
  interestRate    Decimal  @default(0) @db.Decimal(5, 2)
  installments    Int
  installmentAmount Decimal?  @db.Decimal(12, 2)
  startDate       DateTime?
  endDate         DateTime?
  status          String   @default("PENDING")
  approvedById    String?
  approvedBy      User?    @relation("LoanApprover", fields: [approvedById], references: [id])
  approvalNotes   String?  @db.Text
  approvedAt      DateTime?
  disbursedAt     DateTime?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  repayments LoanRepayment[]
}

model LoanRepayment {
  id            String   @id @default(uuid())
  loanId        String
  loan          StaffLoan @relation(fields: [loanId], references: [id])
  installmentNumber Int
  dueDate       DateTime
  amount        Decimal  @db.Decimal(12, 2)
  paidAmount    Decimal  @default(0) @db.Decimal(12, 2)
  paidDate      DateTime?
  status        String   @default("PENDING")
  payrollMonth  String?
  arrears       Decimal  @default(0) @db.Decimal(12, 2)
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// ==================== PETTY CASH MODULE ====================

model PettyCashCategory {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  maxPerTransaction Decimal?  @db.Decimal(12, 2)
  requiresApproval Boolean @default(true)
  active      Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactions PettyCashTransaction[]
}

model BranchFloatConfig {
  id              String   @id @default(uuid())
  branchId        String   @unique
  tier            String
  baseAmount      Decimal  @db.Decimal(12, 2)
  minTriggerPct   Decimal  @default(30) @db.Decimal(5, 2)
  hardCap         Decimal  @db.Decimal(12, 2)
  avgWeeklySpend  Decimal?  @db.Decimal(12, 2)
  activeFrom      DateTime @default(now())
  reviewDate      DateTime
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  ledger PettyCashLedger[]
  replenishments ReplenishmentRequest[]
  counts CashCount[]
}

model PettyCashTransaction {
  id              String   @id @default(uuid())
  ledgerId        String   @unique
  ledger          PettyCashLedger @relation(fields: [ledgerId], references: [id])
  categoryId      String
  category        PettyCashCategory @relation(fields: [categoryId], references: [id])
  amount          Decimal  @db.Decimal(12, 2)
  currency        String   @default("KES")
  description     String   @db.Text
  receiptUrl      String?
  receiptDuplicate Boolean @default(false)
  transactionDate DateTime
  voucherNumber   String   @unique
  requestedById   String
  requestedBy     User     @relation("PettyCashRequester", fields: [requestedById], references: [id])
  branch          String
  status          String   @default("PENDING")
  approvalChain   Json
  approvalHistory Json
  approvedById    String?
  approvedBy      User?    @relation("PettyCashApprover", fields: [approvedById], references: [id])
  approvedAt      DateTime?
  paidAt          DateTime?
  paidBy          String?
  paymentMethod   String?
  paymentRef      String?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PettyCashLedger {
  id              String   @id @default(uuid())
  branchId        String
  branch          BranchFloatConfig @relation(fields: [branchId], references: [id])
  entryType       String
  amount          Decimal  @db.Decimal(12, 2)
  runningBalance  Decimal  @db.Decimal(12, 2)
  referenceType   String?
  referenceId     String?
  description     String   @db.Text
  entryDate       DateTime @default(now())
  createdBy       String
  lockedPeriod    String?
  createdAt       DateTime @default(now())
  
  transaction PettyCashTransaction?
  
  @@index([branchId, entryDate])
}

model ReplenishmentRequest {
  id              String   @id @default(uuid())
  branchId        String
  branch          BranchFloatConfig @relation(fields: [branchId], references: [id])
  requestedAmount Decimal  @db.Decimal(12, 2)
  currentBalance  Decimal  @db.Decimal(12, 2)
  targetBalance   Decimal  @db.Decimal(12, 2)
  justification   String?  @db.Text
  status          String   @default("PENDING")
  approvalChain   Json
  approvalHistory Json
  approvedById    String?
  approvedAmount  Decimal?  @db.Decimal(12, 2)
  approvedAt      DateTime?
  paidAt          DateTime?
  paidBy          String?
  paymentMethod   String?
  paymentRef      String?
  receiptUrl      String?
  ledgerEntryId   String?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CashCount {
  id              String   @id @default(uuid())
  branchId        String
  branch          BranchFloatConfig @relation(fields: [branchId], references: [id])
  countedAmount   Decimal  @db.Decimal(12, 2)
  systemBalance   Decimal  @db.Decimal(12, 2)
  variance        Decimal  @db.Decimal(12, 2)
  variancePct     Decimal  @db.Decimal(5, 2)
  counterId       String
  counter         User     @relation(fields: [counterId], references: [id])
  witnessId       String?
  photoUrl        String?
  notes           String?  @db.Text
  countType       String
  resolved        Boolean  @default(false)
  resolutionNotes String?  @db.Text
  resolvedAt      DateTime?
  countDate       DateTime @default(now())
  createdAt       DateTime @default(now())
  
  @@index([branchId, countDate])
}

// ==================== PERFORMANCE & KPI MODULE ====================

model BranchDailyKPI {
  id                String   @id @default(uuid())
  branch            String
  region            String
  reportDate        DateTime
  reportedById      String
  reportedBy        User     @relation(fields: [reportedById], references: [id])
  newLoansCount     Int      @default(0)
  disbursedAmount   Decimal  @default(0) @db.Decimal(12, 2)
  recoveriesAmount  Decimal  @default(0) @db.Decimal(12, 2)
  prepaymentsAmount Decimal  @default(0) @db.Decimal(12, 2)
  outstandingPrincipal Decimal @default(0) @db.Decimal(12, 2)
  arrearsPrincipal  Decimal  @default(0) @db.Decimal(12, 2)
  par1_30           Decimal  @default(0) @db.Decimal(12, 2)
  par31_60          Decimal  @default(0) @db.Decimal(12, 2)
  par61_90          Decimal  @default(0) @db.Decimal(12, 2)
  par90Plus         Decimal  @default(0) @db.Decimal(12, 2)
  parTotal          Decimal  @default(0) @db.Decimal(12, 2)
  parPercentage     Decimal  @default(0) @db.Decimal(5, 2)
  comments          String?  @db.Text
  status            String   @default("DRAFT")
  approvedById      String?
  approvedAt        DateTime?
  rejectionReason   String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([branch, reportDate])
  @@index([region, reportDate])
}

model KPIImportJob {
  id          String   @id @default(uuid())
  filename    String
  fileUrl     String
  uploadedBy  String
  totalRows   Int
  successRows Int      @default(0)
  errorRows   Int      @default(0)
  status      String   @default("PROCESSING")
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  errors KPIImportError[]
}

model KPIImportError {
  id        String   @id @default(uuid())
  jobId     String
  job       KPIImportJob @relation(fields: [jobId], references: [id])
  rowNumber Int
  errorType String
  field     String?
  message   String   @db.Text
  data      Json
  createdAt DateTime @default(now())
}

// ==================== DOCUMENT MANAGEMENT MODULE ====================

model StaffDocument {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  type          String
  name          String
  fileUrl       String
  fileSize      Int
  mimeType      String
  expiryDate    DateTime?
  reminderSent  Boolean  @default(false)
  reminderDays  Int?
  version       Int      @default(1)
  supersedes    String?
  uploadedById  String
  uploadedAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId, expiryDate])
}

model PolicyDocument {
  id          String   @id @default(uuid())
  category    String
  title       String
  description String?  @db.Text
  version     String
  fileUrl     String
  fileSize    Int
  active      Boolean  @default(true)
  mandatory   Boolean  @default(false)
  publishedBy String
  publishedAt DateTime @default(now())
  expiresAt   DateTime?
  changeLog   String?  @db.Text
  previousVersion String?
  updatedAt   DateTime @updatedAt
  
  acknowledgments PolicyAcknowledgment[]
}

model PolicyAcknowledgment {
  id         String   @id @default(uuid())
  policyId   String
  policy     PolicyDocument @relation(fields: [policyId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  readAt     DateTime @default(now())
  acknowledgedAt DateTime?
  ipAddress  String?
  deviceInfo String?
  
  @@unique([policyId, userId])
  @@index([policyId, acknowledgedAt])
}

// ==================== COMMUNICATION MODULE ====================

model Announcement {
  id        String   @id @default(uuid())
  title     String
  body      String   @db.Text
  bodyHtml  String?  @db.Text
  attachments Json?
  target    String   @db.Text
  targetType String
  priority  String   @default("NORMAL")
  channels  Json
  publishAt DateTime @default(now())
  expiresAt DateTime?
  createdBy String
  creator   User     @relation("AnnouncementCreator", fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  reads AnnouncementRead[]
}

model AnnouncementRead {
  id             String   @id @default(uuid())
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  readAt         DateTime @default(now())
  acknowledged   Boolean  @default(false)
  acknowledgedAt DateTime?
  
  @@unique([announcementId, userId])
  @@index([userId, readAt])
}

model SmsMessage {
  id          String   @id @default(uuid())
  to          String
  message     String   @db.Text
  provider    String
  status      String   @default("PENDING")
  messageId   String?
  cost        Decimal?  @db.Decimal(8, 2)
  sentAt      DateTime?
  deliveredAt DateTime?
  errorMessage String?  @db.Text
  contextType String?
  contextId   String?
  createdAt   DateTime @default(now())
  
  @@index([to, createdAt])
  @@index([status, createdAt])
}

// ==================== RBAC & AUDIT MODULE ====================

model Role {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  color       String?
  icon        String?
  permissions Json
  hierarchy   Int
  canDelegateTo Json
  inheritsFrom String?
  dashboardLayout Json?
  allowedModules  Json
  dataFilters     Json
  isSystem    Boolean  @default(false)
  active      Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users UserRole[]
  delegations RoleDelegation[]
  menus NavigationMenu[]
}

model Permission {
  id          String   @id @default(uuid())
  code        String   @unique
  module      String
  resource    String
  action      String
  description String?  @db.Text
  category    String
  risk        String   @default("LOW")
  requires    Json?
  conflicts   Json?
  isSystem    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model PermissionGroup {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  permissions Json
  module      String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
}

model UserRole {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  roleId      String
  role        Role     @relation(fields: [roleId], references: [id])
  extraPermissions Json?
  branchRestrictions Json?
  regionRestrictions Json?
  effectiveFrom DateTime @default(now())
  effectiveTo   DateTime?
  assignedBy  String
  assignedAt  DateTime @default(now())
  
  @@unique([userId, roleId])
  @@index([userId, effectiveFrom, effectiveTo])
}

model RoleDelegation {
  id          String   @id @default(uuid())
  fromRoleId  String
  fromRole    Role     @relation(fields: [fromRoleId], references: [id])
  toUserId    String
  reason      String   @db.Text
  permissions Json
  branchScope String?
  regionScope String?
  startDate   DateTime
  endDate     DateTime
  status      String   @default("ACTIVE")
  revokedBy   String?
  revokedAt   DateTime?
  createdBy   String
  createdAt   DateTime @default(now())
  
  @@index([toUserId, status, startDate, endDate])
}

model NavigationMenu {
  id          String   @id @default(uuid())
  roleId      String?
  role        Role?    @relation(fields: [roleId], references: [id])
  name        String
  structure   Json
  isDefault   Boolean  @default(false)
  isSystem    Boolean  @default(false)
  active      Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  userEmail  String
  userRole   String
  action     String
  module     String
  entityType String?
  entityId   String?
  changes    Json?
  ipAddress  String?
  userAgent  String?  @db.Text
  timestamp  DateTime @default(now())
  
  @@index([userId, timestamp])
  @@index([module, timestamp])
  @@index([entityType, entityId])
}

model WorkflowTemplate {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  module      String
  entityType  String
  definition  Json
  triggers    Json
  conditions  Json
  version     String   @default("1.0")
  isDefault   Boolean  @default(false)
  priority    Int      @default(0)
  active      Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  instances WorkflowInstance[]
}

model WorkflowInstance {
  id          String   @id @default(uuid())
  templateId  String
  template    WorkflowTemplate @relation(fields: [templateId], references: [id])
  entityType  String
  entityId    String
  currentNode String
  status      String   @default("IN_PROGRESS")
  history     Json
  contextData Json
  startedAt   DateTime @default(now())
  completedAt DateTime?
  updatedAt   DateTime @updatedAt
  
  actions WorkflowAction[]
  
  @@index([entityType, entityId])
  @@index([status, currentNode])
}

model WorkflowAction {
  id          String   @id @default(uuid())
  instanceId  String
  instance    WorkflowInstance @relation(fields: [instanceId], references: [id])
  nodeId      String
  actionType  String
  performedBy String
  action      String
  notes       String?  @db.Text
  dueAt       DateTime?
  performedAt DateTime @default(now())
  ipAddress   String?
  deviceInfo  String?
  
  @@index([instanceId, performedAt])
}

model WorkflowRule {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  module      String
  entityType  String
  condition   Json
  action      Json
  priority    Int      @default(0)
  active      Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DashboardTemplate {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  forRoles    Json
  forPositions Json
  isDefault   Boolean  @default(false)
  layout      Json
  version     String   @default("1.0")
  isSystem    Boolean  @default(false)
  active      Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userDashboards UserDashboard[]
}

model UserDashboard {
  id          String   @id @default(uuid())
  userId      String
  templateId  String?
  template    DashboardTemplate? @relation(fields: [templateId], references: [id])
  name        String
  isDefault   Boolean  @default(false)
  layout      Json
  theme       String?
  refreshRate Int      @default(60)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, name])
}

model DashboardWidget {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  category    String
  component   String
  config      Json
  dataSourceType String
  endpoint    String?
  icon        String?
  preview     String?
  isSystem    Boolean  @default(false)
  active      Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DataSource {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  module      String
  type        String
  endpoint    String?
  method      String?
  params      Json?
  transform   String?  @db.Text
  cache       Json?
  permissions Json
  dataFilters Json
  active      Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WidgetTemplate {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  category    String
  configSchema Json
  defaultConfig Json
  requiredPermissions Json
  requiredModules Json
  icon        String
  thumbnail   String?
  minWidth    Int      @default(2)
  minHeight   Int      @default(2)
  defaultWidth Int     @default(4)
  defaultHeight Int    @default(3)
  isSystem    Boolean  @default(true)
  usageCount  Int      @default(0)
  rating      Decimal?  @db.Decimal(3, 2)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RoleTemplate {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?  @db.Text
  category    String
  permissions Json
  dataScope   Json
  dashboardId String?
  menuId      String?
  icon        String?
  isSystem    Boolean  @default(true)
  active      Boolean  @default(true)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
}
